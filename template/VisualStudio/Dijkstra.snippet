<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Dijkstra</Title>
      <Shortcut>Dijkstra</Shortcut>
      <Description>Dijkstra</Description>
      <Author>firewood</Author>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[struct Dijkstra {
	int64_t size;
	vector<int64_t> edge_costs;
	vector<vector<pair<int64_t, int64_t>>> edges;

	Dijkstra(int64_t size_) : size(size_), edges(size) { }

	void build_unidirectional_edges(std::vector<int64_t>& from, std::vector<int64_t>& to, std::vector<int64_t> costs = {}) {
		edge_costs = !costs.empty() ? costs : std::vector<int64_t>(from.size(), 1);
		for (int i = 0; i < from.size(); ++i) {
			edges[from[i]].emplace_back(make_pair(to[i], i));
		}
	}

	void build_bidirectional_edges(std::vector<int64_t>& from, std::vector<int64_t>& to, std::vector<int64_t> costs = {}) {
		edge_costs = !costs.empty() ? costs : std::vector<int64_t>(from.size(), 1);
		for (int i = 0; i < from.size(); ++i) {
			edges[from[i]].emplace_back(make_pair(to[i], i));
			edges[to[i]].emplace_back(make_pair(from[i], i));
		}
	}

	vector<int64_t> get_min_costs(int64_t start) {
		vector<int64_t> min_costs(size, 1LL << 60);
		priority_queue<pair<int64_t, int64_t>, vector<pair<int64_t, int64_t>>, greater<>> q;
		min_costs[start] = 0;
		q.emplace(make_pair(0, start));
		while (!q.empty()) {
			int64_t cost = q.top().first, node = q.top().second;
			q.pop();
			if (cost > min_costs[node]) continue;
			for (auto kv : edges[node]) {
				int64_t next_node = kv.first, edge_index = kv.second;
				int64_t next_cost = cost + edge_costs[edge_index];
				if (next_cost < min_costs[next_node]) {
					min_costs[next_node] = next_cost;
					q.emplace(make_pair(next_cost, next_node));
				}
			}
		}
		return min_costs;
	}
};
]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
