<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>SegmentTree</Title>
      <Shortcut>SegmentTree</Shortcut>
      <Description>SegmentTree</Description>
      <Author>firewood</Author>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[template<typename T> inline T minimum(const T & a, const T & b) { return min(a, b); }
template<typename T> inline T maximum(const T & a, const T & b) { return max(a, b); }
template<typename T> inline T logicalAnd(const T& a, const T& b) { return a & b; }
template<typename T> inline T logicalOr(const T& a, const T& b) { return a | b; }
template<typename T> inline T exclusiveOr(const T& a, const T& b) { return a ^ b; }
template<typename T> inline T gcd(const T& a, const T& b) { return b ? gcd(b, a % b) : a; }

template<typename T, int64_t SIZE, T DEF_VAL, T Compare(const T&, const T&)>
class SegmentTree {
	vector<T> val;
public:
	SegmentTree() : val(SIZE * 2, DEF_VAL) { }
	void update(int64_t i, const T &value) {
		i += SIZE;
		// val[i] = Compare(val[i], value);
		val[i] = value;
		while (i > 1) i >>= 1, val[i] = Compare(val[i * 2], val[i * 2 + 1]);
	}
	T get(int64_t a, int64_t b, int64_t l = 0, int64_t r = SIZE, int64_t i = 1) {
		if (r <= a || b <= l) return DEF_VAL;
		if (a <= l && r <= b) return val[i];
		return Compare(get(a, b, l, (l + r) / 2, i * 2), get(a, b, (l + r) / 2, r, i * 2 + 1));
	}
	int64_t find_leftmost_index(int64_t a, int64_t b, const T &value, int64_t l = 0, int64_t r = SIZE, int64_t i = 1) {
		if (Compare(val[i], value) != val[i]) return -1;
		if (r <= a || b <= l) return -1;
		if (i >= SIZE) return i - SIZE;
		int64_t leftmost_index = find_leftmost_index(a, b, value, l, (l + r) / 2, i * 2);
		if (leftmost_index >= 0) return leftmost_index;
		return find_leftmost_index(a, b, value, (l + r) / 2, r, i * 2 + 1);
	}
	int64_t find_rightmost_index(int64_t a, int64_t b, const T &value, int64_t l = 0, int64_t r = SIZE, int64_t i = 1) {
		if (Compare(val[i], value) != val[i]) return -1;
		if (r <= a || b <= l) return -1;
		if (i >= SIZE) return i - SIZE;
		int64_t rightmost_index = find_rightmost_index(a, b, value, (l + r) / 2, r, i * 2 + 1);
		if (rightmost_index >= 0) return rightmost_index;
		return find_rightmost_index(a, b, value, l, (l + r) / 2, i * 2);
	}
};
typedef SegmentTree<int64_t, 1 << 18, 1LL << 60, minimum<int64_t>> MinSegTree;
typedef SegmentTree<int64_t, 1 << 18,         0, maximum<int64_t>> MaxSegTree;
typedef SegmentTree<int64_t, 1 << 18,         0, exclusiveOr<int64_t>> XorSegTree;
typedef SegmentTree<int64_t, 1 << 18,         0, gcd<int64_t>> GcdSegTree;
]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
